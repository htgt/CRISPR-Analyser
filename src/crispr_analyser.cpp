/*
    The MIT License (MIT)

    Copyright (c) 2014 Genome Research Limited

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    Written by Alex Hodgkins (ah19@sanger.ac.uk) in 2014
    Some code taken from scanham written by German Tischler
*/
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <sstream>
#include <vector>
#include <array>
#include <stdexcept>
#include <ctime>
#include <climits>
#include <unistd.h>

#include "utils.h"
#include "crisprutil.h"

using namespace std;

int usage() {
    fprintf(stderr, "\n");
    fprintf(stderr, "Program: crispr_analyser\n");
    fprintf(stderr, "Contact: Alex Hodgkins <ah19@sanger.ac.uk>\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Usage: crispr_analyser <command> [options]\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Command: gather     Find all CRISPRs within a genome\n");
    fprintf(stderr, "         index      Create binary index of all CRISPRs\n");
    fprintf(stderr, "         align      Find potential off targets for CRISPRs\n");
    fprintf(stderr, "         search     Find a CRISPR ID given a gRNA\n");
    fprintf(stderr, "\n\n");
    fprintf(stderr, "Example end to end usage:\n");
    fprintf(stderr, "Create index:\n");
    fprintf(stderr, "\tcrispr_analyser index -i human_chr1-11.csv -i human_chr12_on.csv -o index.bin\n");
    fprintf(stderr, "Calculate off targets for single CRISPR:\n");
    fprintf(stderr, "\tcrispr_analyser align 873245 > crispr_data.tsv\n");
    fprintf(stderr, "\n");

    return 1;
}

int gather_usage() {
    fprintf(stderr, "\n");
    fprintf(stderr, "Usage: crispr_analyser gather [options]\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Options: -i FILE    Input file of a genome .fa file\n");
    fprintf(stderr, "         -o FILE    The file to put the TSV CRISPR data to\n");
    fprintf(stderr, "         -p TEXT    PAM recognition sequence (default GG)\n");
    fprintf(stderr, "         -e INT     Species ID - the species ID that your database uses");
    fprintf(stderr, "\n");
    fprintf(stderr, "Example usage:\n");
    fprintf(stderr, "crispr_analyser gather -i ~/GRCh38.fa -o ~/GRCh38_crisprs.tsv -e 1\n");
    fprintf(stderr, "\n");

    return 1;
}

int index_usage() {
    fprintf(stderr, "\n");
    fprintf(stderr, "Usage: crispr_analyser index [options]\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Options: -o FILE    The file to put the binary index to\n");
    fprintf(stderr, "         -i FILE    Input file of CSV crispr data (multiple -i flags can be specified)\n");
    fprintf(stderr, "         -a TEXT    Assembly (e.g. GRCh37)\n");
    fprintf(stderr, "         -s TEXT    Species (e.g. Human)\n");
    fprintf(stderr, "         -e INT     Species ID - the species ID that your database uses");
    fprintf(stderr, "         -f INT     Offset - the database offset this species has (default 0)");
    fprintf(stderr, "\n");
    fprintf(stderr, "Example usage:\n");
    fprintf(stderr, "crispr_analyser index -i ~/human_chr1-11.csv -i ~/human_chr12_on.csv -o ~/index.bin");
    fprintf(stderr, " -s Human -a GRCh37 -e 1\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Note: the input to this option is a csv file of CRISPR data");
    fprintf(stderr, "      generated by the gather step\n");
    fprintf(stderr, "\n");

    return 1;
}

int align_usage() {
    fprintf(stderr, "\n");
    fprintf(stderr, "Usage: crispr_analyser align [options] <ids>\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Options: -i FILE    The file containing the CRISPR index, (from the index step)\n");
    fprintf(stderr, "         -s int     The CRISPR range start\n");
    fprintf(stderr, "         -n int     How many CRISPRs to compute after start)\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Note:\n");
    fprintf(stderr, "You can specify a list of ids, OR specify a range of CRISPRs. ");
    fprintf(stderr, "For example:\n\n");
    fprintf(stderr, "./crispr_analyser align -s 43275 -n 1000\n");
    fprintf(stderr, "  This will calculate off targets for 1000 crisprs,\n");
    fprintf(stderr, "  the ids of which will be 43275-44725\n");
    fprintf(stderr, "\n\n");
    fprintf(stderr, "crispr_analyser align 873245 923577 237587 109583\n");
    fprintf(stderr, "  This will calculate off targets for the given 4 CRISPRs\n");
    fprintf(stderr, "\n");

    return 1;
}

int search_usage() {
    fprintf(stderr, "\n");
    fprintf(stderr, "Usage: crispr_analyser search [options]\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "Options: -i FILE    The file containing the CRISPR index, (from the index step)\n");
    fprintf(stderr, "         -s TEXT    The CRISPR sequence to search for (must be 20bp)\n");
    fprintf(stderr, "         -f FILE    An alternate to -s, a file containing multiple CRISPR\n");
    fprintf(stderr, "                    sequences to search for (one per line, 20bp each)\n");
    fprintf(stderr, "         -p int     Placement of the PAM relative to the sequence. Default is to ignore PAM\n");
    fprintf(stderr, "\n");
    fprintf(stderr, "For example:\n\n");
    fprintf(stderr, " crispr_analyser search -i /lustre/scratch109/sanger/ah19/crispr_indexes/GRCh37_index.bin -s GTGTCAGTGAAACTTACTCT\n\n");
    fprintf(stderr, "\n");

    return 1;
}

int gather(int argc, char * argv[]) {
    int c = -1;

    uint8_t species_id = CHAR_MAX;
    string infile = "", outfile = "", pam = "GG";

    while ( (c = getopt(argc, argv, "i:o:p:e:")) != -1 ) {
        switch ( c ) {
            case 'i': infile = optarg; break;
            case 'o': outfile = optarg; break;
            case 'p': pam = optarg; break;
            case 'e': species_id = stoi(optarg); break;
            case '?': return gather_usage();
        }
    }

    if ( infile == "" ) {
        cerr << "Please provide a genome fasta file with the -i option" << endl;
        return gather_usage();
    }

    if ( outfile == "" ) {
        cerr << "Please provide a file to output the csv data to with -o" << endl;
        return gather_usage();
    }

    if ( species_id == CHAR_MAX ) {
        cerr << "Please provide a species_id with -e\n";
        return gather_usage();
    }

    cerr << "Species ID is " << int(species_id) << endl;
    cerr << "PAM recognition sequence is " << pam << endl;

    CrisprUtil finder = CrisprUtil();

    finder.parse_genome(infile, outfile, species_id, pam);

    return 0;
}

int index(int argc, char * argv[]) {
    int c = -1;

    vector<string> infiles;
    uint8_t species_id = CHAR_MAX;
    uint64_t offset = 0;
    string outfile = "", assembly = "", species = "";

    while ( (c = getopt(argc, argv, "i:o:a:s:e:f:")) != -1 ) {
        switch ( c ) {
            case 'i': infiles.push_back( optarg ); break;
            case 'o': outfile = optarg; break;
            case 'a': assembly = optarg; break;
            case 's': species = optarg; break;
            case 'e': species_id = stoi(optarg); break;
            case 'f': offset = stoll(optarg); break;
            case '?': return index_usage();
        }
    }

    //validate the so called options
    if ( ! infiles.size() ) {
        cerr << "Please provide an infile with the -i option\n";
        return index_usage();
    }

    if ( outfile == "" ) {
        cerr << "Please provide an output file\n";
        return index_usage();
    }

    if ( assembly == "" || species == "" ) {
        cerr << "Please provide a species (-s) and an assembly (-a)\n";
        return index_usage();
    }

    if ( species_id == CHAR_MAX ) {
        cerr << "Please provide a species_id (-e)\n";
        return index_usage();
    }

    cerr << "Outfile:\n\t" << outfile << "\n";
    cerr << "Infiles:\n";
    for ( auto i = infiles.begin(); i < infiles.end(); i++ ) {
        cerr << "\t" << *i << "\n";
    }

    //resize to be the same length as our metadata char array
    //it has to be -1 to allow for the \0
    assembly.resize( MAX_CHAR_SIZE-1 );
    species.resize( MAX_CHAR_SIZE-1 );

    //initialize metadata and send a pointer to the method
    metadata_t data;
    strcpy( data.assembly, assembly.c_str() );
    strcpy( data.species, species.c_str() );
    data.species_id = species_id;
    data.offset = offset;
    data.num_seqs = 0;
    data.seq_length = 20;

    CrisprUtil finder = CrisprUtil();
    finder.text_to_binary( infiles, outfile, &data );

    return 0;
}

int search(int argc, char * argv[]) {
    string index = "";
    string seq = "";
    string seq_file = "";
    short pam_right = 2;

    int c = -1;
    while ( (c = getopt(argc, argv, "s:f:n:i:p:")) != -1 ) {
        switch ( c ) {
            case 'p': pam_right = atoi( optarg ); break;
            case 's': seq = optarg; break;
            case 'f': seq_file = optarg; break;
            case 'i': index = optarg; break;
            case '?': return search_usage();
        }
    }

    if ( index == "" ) {
        cerr << "An index file must be specified with -i" << endl;
        return search_usage();
    }

    if ( (seq == "" || seq.size() != 20) && seq_file == "") {
        cerr << "A 20bp sequence must be specified with -s" << endl;
        return search_usage();
    }

    if ( seq != "" && seq_file != "" ) {
        cerr << "Cannot specify both a sequence and a sequence input file" <<endl;
        return search_usage();
    }

    CrisprUtil finder = CrisprUtil();
    finder.load_binary( index );

    if ( seq_file == "" ) {
        vector<uint64_t> matches;
        finder.search_by_seq( seq, pam_right, matches );
        if ( matches.size() ) {
            cout << "Found the following matches:" << endl;

            for ( uint32_t i = 0; i < matches.size(); ++i ) {
                cout << "\t" << matches[i] << endl;
            }
        }
    }
    else {
        ifstream in(seq_file);
        if ( !in.good() ) {
            cerr << "Cannot read input file '" << seq_file << "'" << endl;
            return 1;
        }
        uint64_t line = 0;
        while ( std::getline(in, seq) ) {
            ++line;
            if ( seq.size() == 0 ) {
                continue;
            }
            else if ( seq.size() != 20 ) {
                cerr << "'" << seq << "' is not a valid guide RNA on line " << line << endl;
                continue;
            }
            vector<uint64_t> matches;
            finder.search_by_seq( seq, pam_right, matches );
            if ( matches.size() ) {
                cout << seq << ":" << endl;
                for ( uint32_t i = 0; i < matches.size(); ++i ) {
                    cout << "\t" << matches[i] << endl;
                }
            }
            else {
                cerr << "No matches for " << seq << " on line " << line << endl;
            }
        }
        in.close();
    }

    return 0;
}

int align(int argc, char * argv[]) {
    int c = -1;

    uint64_t start = 0, num = 0;
    vector<uint64_t> ids;
    string index = "";
    bool range_mode = 0;

    while ( (c = getopt(argc, argv, "s:n:i:")) != -1 ) {
        switch ( c ) {
            case 's': start = atol( optarg ); break;
            case 'n': num = atol( optarg ); break;
            case 'i': index = optarg; break;
            case '?': return align_usage();
        }
    }

    if ( index == "" ) {
        cerr << "An index file must be specified with the -i option\n";
        return align_usage();
    }

    //range mode takes precedence over additional ids
    if ( start != 0 && num != 0 ) {
        cerr << "Will take " << num << " ids, starting from " << start << "\n";
        range_mode = 1;
        //c.find_off_targets( start, num );
    }
    else if ( optind < argc ) { //see if we got 1 or more ids at the end
        cerr << "Provided ids:";
        for ( int i = optind; i < argc; i++ ) {
            uint64_t id = atol(argv[i]);
            cerr << " " << id;
            ids.push_back( id );
        }
        cerr << "\n";
    }
    else {
        return align_usage();
    }

    CrisprUtil finder = CrisprUtil();
    finder.load_binary( index );

    if ( range_mode ) {
        finder.find_off_targets( start, num );
    }
    else {
        finder.find_off_targets( ids );
    }

    return 0;
}

int main(int argc, char * argv[]) {
    //at least 1 option is required
    if ( argc < 2 )
        return usage();

    if ( strcmp(argv[1], "gather") == 0 )
        return gather( argc-1, argv+1 );
    else if ( strcmp(argv[1], "index") == 0 )
        return index( argc-1, argv+1 );
    else if ( strcmp(argv[1], "align") == 0 )
        return align( argc-1, argv+1 );
    else if ( strcmp(argv[1], "search") == 0 ) {
        return search( argc-1, argv+1 );
    }
    else {
        fprintf(stderr, "Unrecognised command: %s\n", argv[1] );
        return 1;
    }

    return 0;
}

